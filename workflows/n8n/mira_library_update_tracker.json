{
  "nodes": [
    {
      "parameters": {
        "jsCode": "const tz = 'Asia/Shanghai';\nfunction pad(n){return n<10?('0'+n):(''+n)}\n// ‰ª•‰∏äÊµ∑Êó∂Âå∫ËÆ°ÁÆó‚Äú‰ªäÂ§©‚Äù\nconst nowTz = new Date(new Date().toLocaleString('en-US', { timeZone: tz }));\nconst y = nowTz.getFullYear();\nconst m = pad(nowTz.getMonth()+1);\nconst d = pad(nowTz.getDate());\nconst startMs = Date.parse(`${y}-${m}-${d}T00:00:00+08:00`);\nconst endMs   = startMs + 24*60*60*1000; // [start, end)\n\nreturn Object.entries($input.first().json).map(([libraryId, data]) => {\n  // ËØªÂèñÂÖ®Â±ÄÈùôÊÄÅÊï∞ÊçÆÈáåÁöÑ lastVideoIdÔºàËã•È¶ñÊ¨°Âàô‰∏∫ nullÔºâ\nconst lastId = data.lastVideoId ?? null;\n\n// ÊûÑÈÄ† SQLÔºàÁ§∫‰æãÔºöË°®Âêç assetsÔºõËã•‰Ω†ÁöÑÂÆûÈôÖË°®Âêç‰∏çÂêåÔºåËØ∑ÊîπËøôÈáåÔºâ\nlet sql = `SELECT id,name,created_at,folder_id,custom_fields FROM files WHERE created_at >= ${startMs} AND created_at < ${endMs}`;\nif (lastId) sql += ` AND id > ${lastId}`;\nsql += ' ORDER BY id ASC;';\n\nreturn  {json: { startMs, endMs, lastId, libraryId, libraryData: data, sql, dateStr: `${y}-${m}-${d}` }};\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        576,
        -48
      ],
      "id": "a175c71a-d646-4d0f-a792-de7524331792",
      "name": "Init Today + lastId"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-mira-apis.miraLibraryQuery",
      "typeVersion": 1,
      "position": [
        800,
        -48
      ],
      "id": "34b29c2a-7a4b-4de6-83bc-78b81cc0a02f",
      "name": "Mira: Query Today Videos",
      "credentials": {}
    },
    {
      "parameters": {
        "jsCode": "// ËæìÂÖ•ÔºöMira: Query Today Videos ÁöÑËøîÂõû { success: true, data: [...] }\nconst res = $json;\nconst rows = Array.isArray(res.data) ? res.data : [];\nconst json_data = $('Code').first().json;\nconst agg = {};                // key: folderKeyÔºàÊï∞Â≠óIDÊàñ\"__UNCLASSIFIED__\"Ôºâ => { count, uploaders: {name:cnt} }\nconst folderIdSet = new Set(); // ‰ªÖÊî∂ÈõÜÊúâÊïàÁöÑÊï∞Â≠ó folder_id\nlet maxId = null;\n\nfunction parseUploader(cf) {\n  try {\n    if (!cf) return 'Êú™Áü•';\n    const obj = typeof cf === 'string' ? JSON.parse(cf) : cf;\n    return obj && obj.uploader ? String(obj.uploader) : 'Êú™Áü•';\n  } catch {\n    return 'Êú™Áü•';\n  }\n}\n\nfor (const v of rows) {\n  const fidRaw = v.folder_id;\n  const hasNumericFolder = Number.isFinite(Number(fidRaw)) && fidRaw !== null;\n\n  const folderKey = hasNumericFolder ? String(Number(fidRaw)) : '__UNCLASSIFIED__';\n  if (!agg[folderKey]) agg[folderKey] = { count: 0, uploaders: {} };\n\n  agg[folderKey].count += 1;\n\n  const uploader = parseUploader(v.custom_fields);\n  agg[folderKey].uploaders[uploader] = (agg[folderKey].uploaders[uploader] || 0) + 1;\n\n  if (typeof v.id === 'number') {\n    maxId = (maxId === null ? v.id : Math.max(maxId, v.id));\n    json_data[$('Init Today + lastId').first().json.libraryId].lastVideoId = maxId;\n  }\n\n  // ‰ªÖÂΩìÊòØÊúâÊïàÁöÑÊï∞Â≠ó folder_id Êó∂ÔºåÂä†ÂÖ• folderIds\n  if (hasNumericFolder) folderIdSet.add(Number(fidRaw));\n}\n\n// ËæìÂá∫\nreturn [{\n  total: rows.length,\n  agg,                                // Â∏¶Êúâ \"__UNCLASSIFIED__\" ÁöÑÂàÜÁªÑ\n  folderIds: Array.from(folderIdSet), // ‰∏çÂê´ null/Êó†Êïà\n  maxId,\n  json_data\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1024,
        -48
      ],
      "id": "542ef6a1-2095-4378-b47d-14a22c991b27",
      "name": "Aggregate by folder_id"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-mira-apis.miraLibraryQuery",
      "typeVersion": 1,
      "position": [
        1248,
        -48
      ],
      "id": "19a8eed3-a136-4899-8a36-62aa466ab59a",
      "name": "Mira: Query Folder Titles",
      "credentials": {}
    },
    {
      "parameters": {
        "jsCode": "// ËØªÂèñ‰∏§‰∏™‰∏äÊ∏∏ÔºöËÅöÂêàÁªìÊûú + Êñá‰ª∂Â§πÊ†áÈ¢ò\nconst aggItem  = $items('Aggregate by folder_id', 0, 0)[0]?.json ?? {};\nconst folderRes = $items('Mira: Query Folder Titles', 0, 0)[0]?.json ?? {};\n\nconst total = Number(aggItem.total || 0);\nconst agg   = aggItem.agg || {};\nconst maxId = aggItem.maxId ?? null;\n\n// id => title\nconst titleMap = new Map();\ntry {\n  const list = Array.isArray(folderRes.data) ? folderRes.data : [];\n  for (const f of list) {\n    titleMap.set(Number(f.id), f.title || `Folder ${f.id}`);\n  }\n} catch {}\n\n// Êó•ÊúüÔºà‰∏äÊµ∑Êó∂Âå∫Ôºâ\nconst tz = 'Asia/Shanghai';\nconst nowTz = new Date(new Date().toLocaleString('en-US', { timeZone: tz }));\nconst y = nowTz.getFullYear();\nconst m = String(nowTz.getMonth() + 1).padStart(2, '0');\nconst d = String(nowTz.getDate()).padStart(2, '0');\nconst dateStr = `${y}-${m}-${d}`;\n\n// ‰∏ä‰º†ËÄÖÊ∏≤ÊüìÔºàÂ∏¶ËÆ°Êï∞Ôºâ\nfunction renderUploaders(uploaders = {}) {\n  const pairs = Object.entries(uploaders);\n  if (!pairs.length) return '`Êú™Áü•`';\n  return pairs\n    .map(([u, c]) => (c > 1 ? `\\`${u}√ó${c}\\`` : `\\`${u}\\``))\n    .join('„ÄÅ');\n}\n\n// Ë°åÊ∏≤Êüì\nfunction renderLine(folderKey, info) {\n  const isUnclassified = folderKey === '__UNCLASSIFIED__';\n  const folderTitle = isUnclassified\n    ? 'Êú™ÂàÜÁ±ª'\n    : (titleMap.get(Number(folderKey)) || `Êñá‰ª∂Â§π ${folderKey}`);\n\n  return `- **${info.count}** √ó **${folderTitle}**  ¬∑ ‰∏ä‰º†ËÄÖÔºö${renderUploaders(info.uploaders)}`;\n}\n\n// ÂàÜÁªÑÊéíÂ∫èÔºöÊåâÊï∞ÈáèÈôçÂ∫èÔºõÂêåÊï∞Êó∂‚ÄúÊúâÊ†áÈ¢ò‚Äù‰ºòÂÖàÔºå‚ÄúÊú™ÂàÜÁ±ª‚ÄùÊúÄÂêé\nconst sortedEntries = Object.entries(agg).sort(([ka, ia], [kb, ib]) => {\n  if (ia.count !== ib.count) return ib.count - ia.count;\n  if (ka === '__UNCLASSIFIED__') return 1;\n  if (kb === '__UNCLASSIFIED__') return -1;\n  return 0;\n});\n\n// ÊûÑÈÄ† Markdown\nlet mdTitle = `üé¨ Á¥†Êùê‰∏äÊñ∞Êí≠Êä• ¬∑ ${dateStr}`;\nlet mdText = '';\n\nif (total === 0) {\n  // Êó†Êñ∞Â¢ûÔºöÂ¶ÇÈúÄ‚ÄúÁ©∫Êó∂‰∏çÂèë‚ÄùÔºåÂèØËÆ©‰∏ãÊ∏∏Ê†πÊçÆ send=false Âà§Êñ≠\n  mdText = [\n    `> üóìÔ∏è **${dateStr}**`,\n    '',\n    '‰ªäÂ§©Ê≤°ÊúâÊñ∞ÁöÑËßÜÈ¢ëÁ¥†Êùê‰∏äÊñ∞ÔΩû (Ôø£‚ñΩÔø£)Ôæâ',\n  ].join('\\n');\n} else {\n  const folderCount = sortedEntries.length;\n  const lines = sortedEntries.map(([k, info]) => renderLine(k, info));\n\n  mdText = [\n    `> üóìÔ∏è **${dateStr}**`,\n    '',\n    `**„Äê${$('Init Today + lastId').first().json.libraryData.title}„ÄëÊÄªËßà**`,\n    `- Êñ∞Â¢ûËßÜÈ¢ëÁ¥†ÊùêÔºö**${total}**`,\n    `- Ê∂âÂèäÊñá‰ª∂Â§πÔºö**${folderCount}**`,\n    '',\n    `**ÂàÜÁªÑÊòéÁªÜ**`,\n    ...lines,\n    '',\n    '‚ú® ÂéªÁúãÁúãÂêß~'\n  ].join('\\n');\n}\n\n// ËøîÂõû markdown + ÂÖºÂÆπÊóß text Â≠óÊÆµ\nreturn [{\n  md: { title: mdTitle, text: mdText },\n  message: mdText,    // ÂÖºÂÆπÔºöÂ¶ÇÊûú‰Ω†ËøòÂú®Áî® text Á±ªÂûã\n  send: total > 0     // ‰∏ãÊ∏∏ÂèØÁî®Êù•Âà§Êñ≠ÊòØÂê¶ÂèëÈÄÅ\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1472,
        -48
      ],
      "id": "1d604df1-5555-4287-beb7-bd4a75502cf9",
      "name": "Build DingTalk Message"
    },
    {
      "parameters": {
        "msgtype": "markdown",
        "title": "={{ $json.md.title }}",
        "markdownText": "={{ $json.md.text }}"
      },
      "type": "n8n-nodes-dingtalk.dingTalkRobot",
      "typeVersion": 1,
      "position": [
        1920,
        -48
      ],
      "id": "8f8b15f8-4cab-42c1-b99e-ecb21ed37e39",
      "name": "ÈíâÈíâÊú∫Âô®‰∫∫"
    },
    {
      "parameters": {
        "filePath": "\\\\192.168.31.3\\services\\n8n\\mira_library_report.json",
        "readMode": "json",
        "additionalOptions": {}
      },
      "type": "n8n-nodes-fs.readFile",
      "typeVersion": 1,
      "position": [
        128,
        -48
      ],
      "id": "acbb9611-abcf-4d45-b239-cfe8b92bc755",
      "name": "Read File"
    },
    {
      "parameters": {
        "filePath": "={{ $('Read File').item.json.filePath }}",
        "contentSource": "json",
        "jsonContent": "={{ $('Aggregate by folder_id').item.json.json_data }}",
        "additionalOptions": {}
      },
      "type": "n8n-nodes-fs.writeFile",
      "typeVersion": 1,
      "position": [
        2144,
        -48
      ],
      "id": "7f1581cd-f9eb-4c04-a341-c39e25819b3e",
      "name": "Write File"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a8e13735-a070-4897-aae9-70a7cf3f1663",
              "leftValue": "={{ $json.send }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1696,
        -48
      ],
      "id": "c61f9523-ee48-461e-94ea-3d9c3c57e1e5",
      "name": "If"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 30
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -96,
        -48
      ],
      "id": "e22d6546-3745-4edc-ad99-3a1d4b96a26e",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "jsCode": "\nreturn $input.first().json.content;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        -48
      ],
      "id": "c61acd1f-dbf5-4b56-8f73-e2b55a4dc196",
      "name": "Code"
    }
  ],
  "connections": {
    "Build DingTalk Message": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ÈíâÈíâÊú∫Âô®‰∫∫": {
      "main": [
        [
          {
            "node": "Write File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read File": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "ÈíâÈíâÊú∫Âô®‰∫∫",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Read File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Init Today + lastId",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "d4ffe8e9ee0b48eba716706123a7187f32eae3bdcb0e7763e41e533267bd8a53"
  }
}