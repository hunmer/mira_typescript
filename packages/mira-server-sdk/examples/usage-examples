/**
 * Mira SDK 使用示例
 * 演示如何使用 Mira TypeScript SDK 进行各种操作
 */

import { MiraClient } from '../src/index';

// 基础使用示例
async function basicUsageExample() {
    console.log('=== 基础使用示例 ===');

    // 创建客户端实例
    const client = new MiraClient('http://localhost:8081');

    try {
        // 检查服务器连接
        const isConnected = await client.isConnected();
        console.log('服务器连接状态:', isConnected);

        if (!isConnected) {
            console.log('等待服务器启动...');
            const serverReady = await client.waitForServer(30000);
            if (!serverReady) {
                throw new Error('服务器启动超时');
            }
        }

        // 登录
        console.log('正在登录...');
        await client.login('admin', 'password');
        console.log('登录成功');

        // 获取用户信息
        const userInfo = await client.user().getInfo();
        console.log('用户信息:', userInfo);

        // 获取系统健康状态
        const health = await client.system().getHealth();
        console.log('系统状态:', health);

    } catch (error) {
        console.error('操作失败:', error);
    }
}

// 链式调用示例
async function chainedCallsExample() {
    console.log('=== 链式调用示例 ===');

    const client = new MiraClient('http://localhost:8081');

    try {
        // 链式登录并获取信息
        const result = await client
            .login('admin', 'password')
            .then(() => client.user().getInfo())
            .then(userInfo => {
                console.log('用户信息:', userInfo);
                return client.libraries().getAll();
            })
            .then(libraries => {
                console.log('素材库列表:', libraries);
                return libraries;
            });

        console.log('链式操作完成，共获取到', result.length, '个素材库');

    } catch (error) {
        console.error('链式操作失败:', error);
    }
}

// 素材库管理示例
async function libraryManagementExample() {
    console.log('=== 素材库管理示例 ===');

    const client = new MiraClient('http://localhost:8081');

    try {
        await client.login('admin', 'password');

        // 获取所有素材库
        const libraries = await client.libraries().getAll();
        console.log('现有素材库:', libraries.length, '个');

        // 创建新的本地素材库
        const createResult = await client.libraries().createLocal(
            '测试素材库',
            '/test/library/path',
            '这是一个测试用的素材库'
        );
        console.log('创建素材库结果:', createResult);

        // 获取活跃的素材库
        const activeLibraries = await client.libraries().getActive();
        console.log('活跃素材库:', activeLibraries.length, '个');

        // 如果有素材库，尝试启动第一个
        if (libraries.length > 0) {
            const firstLibrary = libraries[0];
            console.log('正在启动素材库:', firstLibrary.name);

            const startResult = await client.libraries().start(firstLibrary.id);
            console.log('启动结果:', startResult);
        }

    } catch (error) {
        console.error('素材库操作失败:', error);
    }
}

// 插件管理示例
async function pluginManagementExample() {
    console.log('=== 插件管理示例 ===');

    const client = new MiraClient('http://localhost:8081');

    try {
        await client.login('admin', 'password');

        // 获取所有插件
        const plugins = await client.plugins().getAll();
        console.log('已安装插件:', plugins.length, '个');

        // 获取按素材库分组的插件
        const pluginsByLibrary = await client.plugins().getByLibrary();
        console.log('按素材库分组的插件:', pluginsByLibrary);

        // 获取活跃插件
        const activePlugins = await client.plugins().getActive();
        console.log('活跃插件:', activePlugins.length, '个');

        // 搜索插件
        const searchResults = await client.plugins().search('test');
        console.log('搜索结果:', searchResults.length, '个插件包含"test"关键词');

        // 如果有非活跃插件，尝试启用第一个
        const inactivePlugins = await client.plugins().getInactive();
        if (inactivePlugins.length > 0) {
            const plugin = inactivePlugins[0];
            console.log('正在启用插件:', plugin.name);

            const enableResult = await client.plugins().enable(plugin.id);
            console.log('启用结果:', enableResult);
        }

    } catch (error) {
        console.error('插件操作失败:', error);
    }
}

// 文件操作示例
async function fileOperationsExample() {
    console.log('=== 文件操作示例 ===');

    const client = new MiraClient('http://localhost:8081');

    try {
        await client.login('admin', 'password');

        // 获取素材库列表
        const libraries = await client.libraries().getAll();
        if (libraries.length === 0) {
            console.log('没有可用的素材库');
            return;
        }

        const library = libraries[0];
        console.log('使用素材库:', library.name);

        // 模拟文件上传（在实际使用中，这里会是真实的文件对象）
        console.log('模拟文件上传...');
        // const file = new File(['Hello, World!'], 'test.txt', { type: 'text/plain' });
        // const uploadResult = await client.files().uploadFile(file, library.id, {
        //   tags: ['测试', '示例'],
        //   folderId: 'folder-001'
        // });
        // console.log('上传结果:', uploadResult);

        console.log('文件操作示例完成（跳过实际上传）');

    } catch (error) {
        console.error('文件操作失败:', error);
    }
}

// 设备管理示例
async function deviceManagementExample() {
    console.log('=== 设备管理示例 ===');

    const client = new MiraClient('http://localhost:8081');

    try {
        await client.login('admin', 'password');

        // 获取所有设备连接
        const devices = await client.devices().getAll();
        console.log('设备连接信息:', devices);

        // 获取连接的设备
        const connectedDevices = await client.devices().getConnectedDevices();
        console.log('已连接设备:', connectedDevices.length, '个');

        // 获取设备统计信息
        const stats = await client.devices().getStats();
        console.log('设备统计:', stats);

        // 如果有连接的设备，向第一个设备发送消息
        if (connectedDevices.length > 0) {
            const device = connectedDevices[0];
            console.log('向设备发送消息:', device.clientId);

            const messageResult = await client.devices().sendMessage(
                device.clientId,
                device.libraryId,
                { type: 'greeting', content: 'Hello from SDK!' }
            );
            console.log('消息发送结果:', messageResult);
        }

    } catch (error) {
        console.error('设备管理失败:', error);
    }
}

// 数据库操作示例
async function databaseOperationsExample() {
    console.log('=== 数据库操作示例 ===');

    const client = new MiraClient('http://localhost:8081');

    try {
        await client.login('admin', 'password');

        // 获取数据库表列表
        const tables = await client.database().getTables();
        console.log('数据库表:', tables.length, '个');

        if (tables.length > 0) {
            const table = tables[0];
            console.log('查看表:', table.name);

            // 获取表结构
            const schema = await client.database().getTableSchema(table.name);
            console.log('表结构:', schema);

            // 获取表数据（限制数量以避免大量输出）
            if (table.rowCount > 0 && table.rowCount < 100) {
                const data = await client.database().getTableData(table.name);
                console.log('表数据样例:', data.slice(0, 3)); // 只显示前3行
            }
        }

        // 搜索包含特定关键词的表
        const searchResults = await client.database().searchTables('user');
        console.log('包含"user"的表:', searchResults.length, '个');

    } catch (error) {
        console.error('数据库操作失败:', error);
    }
}

// 错误处理和重试示例
async function errorHandlingExample() {
    console.log('=== 错误处理示例 ===');

    const client = new MiraClient('http://localhost:8081');

    try {
        // 使用 safe 方法进行安全操作
        const userInfo = await client.safe(
            () => client.user().getInfo(),
            { id: 0, username: 'guest', realName: '访客' } as any
        );
        console.log('安全获取用户信息:', userInfo);

        // 使用 retry 方法进行重试
        const health = await client.retry(
            () => client.system().getHealth(),
            3, // 最大重试3次
            1000 // 间隔1秒
        );
        console.log('重试获取健康状态:', health);

        // 批量操作
        const results = await client.batch<any>([
            () => client.system().getHealth(),
            () => client.libraries().getAll(),
            () => client.plugins().getAll(),
        ]);
        console.log('批量操作结果:', results.map((r, i) => `操作${i + 1}: 成功`));

    } catch (error) {
        console.error('错误处理示例失败:', error);
    }
}

// 监控示例
async function monitoringExample() {
    console.log('=== 监控示例 ===');

    const client = new MiraClient('http://localhost:8081');

    try {
        console.log('开始监控服务器健康状态...');

        // 监控服务器状态（运行30秒后停止）
        const stopMonitoring = client.system().monitorHealth(
            (isHealthy, health, error) => {
                if (isHealthy && health) {
                    console.log(`✅ 服务器健康 - 运行时间: ${health.uptime}秒`);
                } else {
                    console.log(`❌ 服务器异常:`, error?.message || '未知错误');
                }
            },
            5000 // 每5秒检查一次
        );

        // 30秒后停止监控
        setTimeout(() => {
            stopMonitoring();
            console.log('监控已停止');
        }, 30000);

    } catch (error) {
        console.error('监控示例失败:', error);
    }
}

// 主函数
async function main() {
    console.log('Mira SDK 使用示例开始\n');

    const examples = [
        basicUsageExample,
        chainedCallsExample,
        libraryManagementExample,
        pluginManagementExample,
        fileOperationsExample,
        deviceManagementExample,
        databaseOperationsExample,
        errorHandlingExample,
        monitoringExample,
    ];

    for (const example of examples) {
        try {
            await example();
            console.log(''); // 空行分隔
        } catch (error) {
            console.error('示例执行失败:', error);
            console.log(''); // 空行分隔
        }
    }

    console.log('所有示例执行完成');
}

// 如果直接运行此文件
if (typeof require !== 'undefined' && require.main === module) {
    main().catch(console.error);
}

export {
    basicUsageExample,
    chainedCallsExample,
    libraryManagementExample,
    pluginManagementExample,
    fileOperationsExample,
    deviceManagementExample,
    databaseOperationsExample,
    errorHandlingExample,
    monitoringExample,
};
